// <auto-generated />
using System;
using CTaxCalculator.Src.Infra.MSSQLData.SQLCommands.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CTaxCalculator.Src.Infra.MSSQLData.SQLCommands.Migrations
{
    [DbContext(typeof(CTaxCalculatorCommandDbContext))]
    [Migration("20241004002253_FirstModelCreating")]
    partial class FirstModelCreating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityName" }, "CitiesTable_CityNameColumn_Index");

                    b.ToTable("Cities", "TaxCalculate");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.FreeTaxDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FreeTaxDateTime")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("FreeTaxDates", "TaxCalculate");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.Passage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PassageDateTime")
                        .HasColumnType("DATETIME");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "PassageDateTime" }, "PassageTable_PassageDateTimeTable_Index");

                    b.ToTable("Passages", "TaxCalculate");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.TaxRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxRules", "TaxCalculate");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.VehicleAggregate.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("LastTaxPassagePrice")
                        .HasColumnType("MONEY");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("TotalTaxAmount")
                        .HasColumnType("MONEY");

                    b.Property<byte>("VehicleType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "PlateNumber" }, "VehiclesTable_ColumnPlateNumber_UniqueIndex")
                        .IsUnique();

                    b.HasIndex(new[] { "TotalTaxAmount" }, "VehiclesTable_ColumnTotalTaxAmount_Index");

                    b.ToTable("Vehicles", "TaxCalculate");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.FreeTaxDate", b =>
                {
                    b.HasOne("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.City", null)
                        .WithMany("FreeTaxDates")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.Passage", b =>
                {
                    b.HasOne("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.City", null)
                        .WithMany("Passages")
                        .HasForeignKey("CityId");

                    b.HasOne("CTaxCalculator.Src.Core.Domain.VehicleAggregate.Entities.Vehicle", null)
                        .WithMany("Passages")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.TaxRule", b =>
                {
                    b.HasOne("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.City", null)
                        .WithMany("TaxRules")
                        .HasForeignKey("CityId");

                    b.OwnsOne("CTaxCalculator.Src.Core.Domain.TaxAggregate.ValueOBJs.TaxRuleDateTime", "TaxRuleDateTime", b1 =>
                        {
                            b1.Property<long>("TaxRuleId")
                                .HasColumnType("bigint");

                            b1.Property<TimeOnly>("EndTime")
                                .HasColumnType("TIME(0)")
                                .HasColumnName("TaxRule_EndTime");

                            b1.Property<TimeOnly>("StartTime")
                                .HasColumnType("TIME(0)")
                                .HasColumnName("TaxRule_StartTime");

                            b1.HasKey("TaxRuleId");

                            b1.HasIndex("StartTime", "EndTime");

                            b1.ToTable("TaxRules", "TaxCalculate");

                            b1.WithOwner()
                                .HasForeignKey("TaxRuleId");
                        });

                    b.Navigation("TaxRuleDateTime")
                        .IsRequired();
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.VehicleAggregate.Entities.Vehicle", b =>
                {
                    b.HasOne("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.City", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.TaxAggregate.Entities.City", b =>
                {
                    b.Navigation("FreeTaxDates");

                    b.Navigation("Passages");

                    b.Navigation("TaxRules");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("CTaxCalculator.Src.Core.Domain.VehicleAggregate.Entities.Vehicle", b =>
                {
                    b.Navigation("Passages");
                });
#pragma warning restore 612, 618
        }
    }
}
